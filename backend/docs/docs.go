// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/grok": {
            "get": {
                "description": "Create, read, update, and delete Grok patterns for log parsing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grok"
                ],
                "summary": "Manage Grok patterns",
                "parameters": [
                    {
                        "description": "Grok pattern definition",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with patterns",
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternResponse"
                        }
                    },
                    "201": {
                        "description": "Pattern created successfully",
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pattern not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create, read, update, and delete Grok patterns for log parsing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grok"
                ],
                "summary": "Manage Grok patterns",
                "parameters": [
                    {
                        "description": "Grok pattern definition",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with patterns",
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternResponse"
                        }
                    },
                    "201": {
                        "description": "Pattern created successfully",
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pattern not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Create, read, update, and delete Grok patterns for log parsing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grok"
                ],
                "summary": "Manage Grok patterns",
                "parameters": [
                    {
                        "description": "Grok pattern definition",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with patterns",
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternResponse"
                        }
                    },
                    "201": {
                        "description": "Pattern created successfully",
                        "schema": {
                            "$ref": "#/definitions/types.GrokPatternResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pattern not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cloudwatch/log-events": {
            "post": {
                "description": "Get log events from a specific CloudWatch log stream in a time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cloudwatch"
                ],
                "summary": "Get CloudWatch log events",
                "parameters": [
                    {
                        "description": "Log stream and time range parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cloudwatch.GetLogEventsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cloudwatch.GetLogEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cloudwatch/log-groups": {
            "post": {
                "description": "List all CloudWatch log groups in the specified AWS account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cloudwatch"
                ],
                "summary": "List CloudWatch log groups",
                "parameters": [
                    {
                        "description": "AWS auth and region parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cloudwatch.ListLogGroupsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cloudwatch.ListLogGroupsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cloudwatch/log-streams": {
            "post": {
                "description": "List CloudWatch log streams in a log group for the specified time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cloudwatch"
                ],
                "summary": "List CloudWatch log streams",
                "parameters": [
                    {
                        "description": "Log group and time range parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cloudwatch.ListLogStreamsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cloudwatch.ListLogStreamsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "Retrieve detailed information about the system, storage, and application",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get system and storage information",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Force a cache refresh if set to true",
                        "name": "refresh",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SystemInfoResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ingest": {
            "post": {
                "description": "Ingest log data using existing Grok patterns and store them into the index",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ingest"
                ],
                "summary": "Ingest log data",
                "parameters": [
                    {
                        "description": "Log ingest request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.IngestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.IngestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ingest/end": {
            "post": {
                "description": "End the specified log ingest session and cleanup its resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ingest"
                ],
                "summary": "End log ingest session",
                "parameters": [
                    {
                        "description": "Session end request with session_id",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.IngestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.IngestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ingest/start": {
            "post": {
                "description": "Start a new log ingest session with specific options and returns a session ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ingest"
                ],
                "summary": "Start log ingest session",
                "parameters": [
                    {
                        "description": "Log ingest session start request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.IngestSessionOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.IngestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logs": {
            "get": {
                "description": "Retrieve all stored logs with pagination, sorting, time distribution support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Read all logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of logs to return (default: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of logs to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (default: timestamp)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc or desc, default: desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date for log retrieval (RFC3339 format)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for log retrieval (RFC3339 format)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional search query to filter logs",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional comma-separated source filter",
                        "name": "_src",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logs with pagination, sorting, and time distribution metadata",
                        "schema": {
                            "$ref": "#/definitions/types.LogResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all stored logs from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Clear all logs",
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/parse": {
            "post": {
                "description": "Parse logs using existing or temporary Grok patterns without storing them into the database.\nIf no grok_pattern is provided, this endpoint will suggest the best matching patterns for the logs.\nWhen a grok_pattern is provided, it will parse the logs using that pattern.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parsing"
                ],
                "summary": "Parse logs or suggest patterns",
                "parameters": [
                    {
                        "description": "Log parsing request with optional grok_pattern and custom_patterns",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ParseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Autosuggest results when no pattern provided",
                        "schema": {
                            "$ref": "#/definitions/types.SuggestResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or pattern",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Check if the API is running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Ping the API",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PingResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cloudwatch.GetLogEventsRequest": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "integer"
                },
                "log_group_name": {
                    "type": "string"
                },
                "log_stream_name": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                }
            }
        },
        "cloudwatch.GetLogEventsResponse": {
            "type": "object",
            "properties": {
                "log_events": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "region": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "cloudwatch.ListLogGroupsRequest": {
            "type": "object",
            "properties": {
                "profile": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "cloudwatch.ListLogGroupsResponse": {
            "type": "object",
            "properties": {
                "log_groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "region": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "cloudwatch.ListLogStreamsRequest": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "integer"
                },
                "log_group_name": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                }
            }
        },
        "cloudwatch.ListLogStreamsResponse": {
            "type": "object",
            "properties": {
                "log_streams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "region": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "handlers.PingResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "types.AutosuggestResult": {
            "type": "object",
            "properties": {
                "custom_patterns": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "parsed_logs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "pattern": {
                    "type": "string"
                },
                "pattern_description": {
                    "type": "string"
                },
                "pattern_name": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "types.ErrorResponse": {
            "description": "Standardized error response structure used across all API endpoints",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code for programmatic handling",
                    "type": "string"
                },
                "details": {
                    "description": "Additional error details",
                    "type": "string"
                },
                "error": {
                    "description": "Main error message",
                    "type": "string"
                },
                "status": {
                    "description": "Status will always be \"error\" for error responses",
                    "type": "string"
                }
            }
        },
        "types.GrokPatternRequest": {
            "description": "Request structure for creating or updating Grok patterns",
            "type": "object",
            "properties": {
                "custom_patterns": {
                    "description": "Map of custom pattern definitions used by this pattern",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "description": "Human-readable description of the pattern",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the Grok pattern",
                    "type": "string"
                },
                "pattern": {
                    "description": "The Grok pattern string",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority of the pattern (higher numbers are matched first)",
                    "type": "integer"
                }
            }
        },
        "types.GrokPatternResponse": {
            "description": "Response structure for Grok pattern operations",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message if status is \"error\"",
                    "type": "string"
                },
                "patterns": {
                    "description": "List of Grok patterns",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GrokPatternRequest"
                    }
                },
                "status": {
                    "description": "Status of the operation",
                    "type": "string"
                }
            }
        },
        "types.IngestRequest": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "types.IngestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "failed": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "processed": {
                    "type": "integer"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.IngestSessionOptions": {
            "type": "object",
            "properties": {
                "custom_patterns": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "force_start_day": {
                    "type": "string"
                },
                "force_start_month": {
                    "type": "string"
                },
                "force_start_year": {
                    "type": "string"
                },
                "force_timezone": {
                    "type": "string"
                },
                "meta": {
                    "description": "Meta contains additional fields to be added to each log entry\nThese fields will be directly added to the JSON output for each log\nExample: for CloudWatch logs: {\"aws_region\": \"us-west-2\", \"log_group\": \"my-group\", \"log_stream\": \"stream-1\"}",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "smart_decoder": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "types.LogDistributionEntry": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "source_counts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "types.LogResponse": {
            "type": "object",
            "properties": {
                "available_columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "end_date": {
                    "type": "string"
                },
                "index_query_time": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "log_distribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.LogDistributionEntry"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "offset": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "sort_by": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "time_taken": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "types.ParseRequest": {
            "type": "object",
            "properties": {
                "custom_patterns": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "grok_pattern": {
                    "type": "string"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "session_options": {
                    "$ref": "#/definitions/types.IngestSessionOptions"
                }
            }
        },
        "types.ParseResponse": {
            "description": "Response from the parse endpoint, containing parsed logs and potential error information",
            "type": "object",
            "properties": {
                "custom_patterns": {
                    "description": "Custom patterns used (optional)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "failed": {
                    "description": "Number of log lines that failed to parse",
                    "type": "integer"
                },
                "logs": {
                    "description": "Array of parsed log entries, where each entry is a key-value map",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "pattern": {
                    "description": "Pattern used for parsing (optional)",
                    "type": "string"
                },
                "pattern_description": {
                    "description": "Description of the pattern (optional)",
                    "type": "string"
                },
                "processed": {
                    "description": "Number of log lines processed",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the parse operation\n@Example \"success\" or \"error\"",
                    "type": "string"
                }
            }
        },
        "types.SuggestResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AutosuggestResult"
                    }
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.SystemInfoResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "storage_info": {
                    "type": "object",
                    "properties": {
                        "available_dates": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "source_names": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "storage_directory": {
                            "type": "string"
                        },
                        "storage_size_bytes": {
                            "type": "integer"
                        },
                        "total_indices": {
                            "type": "integer"
                        },
                        "total_log_entries": {
                            "type": "integer"
                        }
                    }
                },
                "system_info": {
                    "type": "object",
                    "properties": {
                        "architecture": {
                            "type": "string"
                        },
                        "go_version": {
                            "type": "string"
                        },
                        "hostname": {
                            "type": "string"
                        },
                        "memory_usage": {
                            "type": "object",
                            "properties": {
                                "alloc_bytes": {
                                    "type": "integer"
                                },
                                "num_gc": {
                                    "type": "integer"
                                },
                                "sys_bytes": {
                                    "type": "integer"
                                },
                                "total_alloc_bytes": {
                                    "type": "integer"
                                }
                            }
                        },
                        "num_cpu": {
                            "type": "integer"
                        },
                        "os_type": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "LogSonic API",
	Description:      "API for ingesting, storing, and querying log data with Grok pattern support",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
